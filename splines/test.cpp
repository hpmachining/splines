#define EIGEN_MPL2_ONLY
#define _USE_MATH_DEFINES

#include "splines.h"
#include <cmath>
#include <vector>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <algorithm>
#include <iterator>
#include <Eigen/Dense>
#include <Eigen/StdVector>
#include <Eigen/MPRealSupport>
#include <mpreal.h>
#include <array>

#pragma warning (disable : 4996)

template <typename RealScalar, size_t rows, size_t cols>
void WriteFile(const std::string& file, const Eigen::Matrix<RealScalar, rows, cols>& out) {
	std::ofstream out_file(file);
	file << out;
}

void TestDegreeElevation() {
	using Point = Eigen::Vector2d;
  size_t dimension = 2; // 2d or 3d points
	const size_t degree = 3;
	const size_t order = degree + 1;

	// Read control points from file
	Point point;
	std::vector<Point> points;
	while (std::cin >> point.x() >> point.y()) {// >> point.z()) {
		points.push_back(point);
	}
  std::cout << std::setprecision(3) << std::fixed;
  std::cout << "Original control points\n";
  for (auto i : points) {
    std::cout << i[0] << " " << i[1] << "\n";
  }
  size_t segment_count = points.size() / order;
  std::vector<double> all_coefficients;
  for (size_t i = 0; i < segment_count; ++i) {
    std::vector<double> coefficients = bezier::GetCoefficients<double>(points, i, degree, dimension);
    all_coefficients.insert(std::end(all_coefficients), std::begin(coefficients), std::end(coefficients));
  }
  std::cout << "\nCoefficients\n";
  for (auto i : all_coefficients) {
    std::cout << i << '\n';
  }
  std::cout << "\nElevated control points\n";
	std::vector<Point> elevated_points = bezier::ElevateDegree<double, bezier::k2d, degree>(points);
  size_t elevated_degree = degree + 1;
  //size_t elevated_order = order + 1;
  for (auto i : elevated_points) {
		std::cout << i[0] << " " << i[1] << "\n";
	}

  all_coefficients.clear();
  
  for (size_t i = 0; i < segment_count; ++i) {
    std::vector<double> elevated_coefficients = bezier::GetCoefficients<double>(elevated_points, i, elevated_degree, dimension);
    all_coefficients.insert(std::end(all_coefficients), std::begin(elevated_coefficients), std::end(elevated_coefficients));
  }
  std::cout << "\nElevated Coefficients\n";
  for (auto i : all_coefficients) {
    std::cout << i << '\n';
  }

  std::cout << "\nControl points from coefficients\n";
  for (size_t i = 0; i < segment_count; ++i) {
    std::vector<Point> cp_coeff = bezier::GetControlPoints<double, Point>(all_coefficients, i, elevated_degree, dimension);
    for (auto i : cp_coeff) {
      std::cout << i[0] << " " << i[1] << "\n";
    }
  }


  //Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> test_invert = bezier::GetPowerCoefficients<double>(6);
  //test_invert.colwise().reverseInPlace();
  //std::cout << "\nBinomial Coefficients degree 4\n" << test_invert.inverse();
	//for (auto i = 0.0; i <= 1.0; i += .25) {
	//	Point coord = bezier::GetPosition<double>(elevated_points, i, 0, 3, dimension);
	//	Point first = bezier::GetFirstDerivative<double>(elevated_points, i, 0, 3, dimension);
	//	Point second = bezier::GetSecondDerivative<double>(elevated_points, i, 0, 3, dimension);
	//	std::cout << "t = " << i << "\n";
	//	std::cout << "Coordinate = x: " << coord.x() << " y: " << coord.y() << "\n";
	//	std::cout << "first derivative = x: " << first.x() << " y: " << first.y() << "\n";
	//	std::cout << "second derivative = x: " << second.x() << " y: " << second.y() << "\n\n";
	//}
	//for (size_t i = 0; i < points.size() / order; ++i) {
	//	const size_t segment_index = i * order;

	//	// Create and fill Eigen::Matrix with control points for specified segment
	//	Eigen::Matrix<double, order, dimension> P = Eigen::Map<Eigen::Matrix<double, order, dimension, Eigen::RowMajor>>
	//		(points[segment_index].data(), order, dimension);

	//	// First point stays the same so add to elevated points
	//	std::vector<Point> elevated_points;
	//	elevated_points.push_back(P.row(0).transpose());

	//	// Calculate the new control points
	//	Eigen::Matrix<double, degree, 1> M1(Eigen::Matrix<double, degree, 1>::LinSpaced(degree, (1.0 / order),
	//		static_cast<double>(degree) / order));
	//	Eigen::Matrix<double, degree, dimension> Q =
	//		(M1.asDiagonal() * P.topRows<degree>()) + (M1.reverse().asDiagonal() * P.bottomRows<degree>());

	//	// Add new control points to elevated points
	//	for (size_t j = 0; j < degree; ++j) {
	//		elevated_points.push_back(Q.row(j).transpose());
	//	}

	//	// Last point stays the same so add to elevated points
	//	elevated_points.push_back(P.row(degree).transpose());

	//	// Output elevated points
	//	size_t k = 0;
	//	for (auto j : elevated_points) {
	//		std::cout << j.transpose() << '\n';
	//		++k;
	//		if (k % (order + 1) == 0) {
	//			std::cout << '\n';
	//		}
	//	}
	//	// Get coefficients
	//	std::vector<double> coeff = bezier::GetCoefficients<double>(elevated_points, 0, 3, 2);
	//	for (auto c : coeff) {
	//		std::cout << c << "\n";
	//	}
	//}
}

void TestMatrix() {
	using Point = Eigen::Vector3d;
	const size_t degree = 3;
	const size_t order = degree + 1;
	const size_t dimension = 3;
	//double t = .75;
	Eigen::Matrix4d lh;
	Eigen::Matrix4d rh;

	Eigen::Matrix<double, order, order> test = bezier::GetPowerCoefficients<double>(degree);
	std::cout << test << '\n';

	Point point;
	std::vector<Point> points;
	while (std::cin >> point.x() >> point.y() >> point.z()) {
		points.push_back(point);
	}
	std::vector<Point, Eigen::aligned_allocator<Point>> all_segments;
	for (size_t i = 0; i < points.size() / order; ++i) {
		std::vector<Point> split_segments = bezier::SplitSegment<double>(points, .25, i + 1, degree, dimension);
		all_segments.insert(std::end(all_segments), std::begin(split_segments), std::end(split_segments));
	}

	size_t j = 0;
	for (auto i : all_segments) {
		std::cout << i.transpose() << '\n';
		++j;
		if (j % order == 0) {
			std::cout << '\n';
		}
	}
}

void TestTriangle() {
	using Point = Eigen::Vector3d;
	const size_t degree = 3;
	const size_t order = degree + 1;
	const size_t dimension = 3;
	double t = .75;
	Eigen::Matrix4d lh;
	Eigen::Matrix4d rh;

	// Read control points from file
	Point point;
	std::vector<Point, Eigen::aligned_allocator<Point>> points;
	while (std::cin >> point.x() >> point.y() >> point.z()) {
		points.push_back(point);
	}

	// Create and fill Eigen::Matrix with control points for specified segment
	Eigen::Matrix<double, order, dimension> P;
	//for (auto i = 0; i < points.size() / order; ++i) {
	size_t i = 0;
	const size_t segment_index = (i)* order;
	for (size_t j = segment_index, p = 0; j < segment_index + order; ++j, ++p) {
		for (size_t k = 0; k < dimension; ++k) {
			P(p, k) = points[j][k];
		}
	}

	// Create and fill the power basis (t) matrix
	Eigen::Matrix<double, order, order> Z;
	Z.setZero();
	Eigen::Matrix<double, 1, order> power;
	for (size_t i = 0; i < order; ++i) {
		power(0, i) = std::pow(t, i);
		Z.diagonal()[i] = power(0, i);
	}

	Eigen::Matrix<double, order, order> M = bezier::GetPowerCoefficients<double>(degree);
	Eigen::Matrix<double, order, order> M1 = M.inverse();

	//std::cout <<
	//	"T\n" << power << "\n\n" <<
	//	"M1\n" << M1 << "\n\n" <<
	//	"Z\n" << Z << "\n\n" <<
	//	"M\n" << M << "\n\n" <<
	//	"P\n" << P << "\n\n";

	Eigen::Matrix<double, order, dimension> result;
	Eigen::Matrix<double, order, order> Q = M1 * Z * M;
	Eigen::Matrix<double, order, order> Q1;
	Q1.setZero();
	for (size_t i = 0; i < order; ++i) {
		Q1.block(order - (i + 1), order - (i + 1), 1, i + 1) = Q.block(i, 0, 1, i + 1);
	}
	result = Q * P;
	std::cout << result << "\n\n";
	result = Q1 * P;
	std::cout << result << "\n\n";
	//std::cout << "Q\n" << Q << "\n\n";
	//std::cout << "Q1\n" << Q1 << "\n\n";
	//std::cout << "Z\n" << Z << "\n\n";
	//std::cout << "Z1\n" << Z1 << "\n\n";
	//std::cout << "Q * P\n" << result << "\n\n";

}

void TestSecondDerivative() {
	const size_t degree = 5;
	Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> coefficients;
	coefficients.resize((degree - 1), (degree - 1));
	coefficients = bezier::GetSecondDerivativeCoefficients<double>(degree);
	std::cout << "2nd Derivative Coefficients\n" << coefficients << "\n\n";
}

void TestFirstDerivative() {
	using Eigen::Dynamic;
	const size_t degree = 3;
	double t = .5;

	// Create and fill the power basis matrix
	Eigen::Matrix<double, 1, Dynamic> parameter;
	parameter.resize(Eigen::NoChange, degree);
	for (size_t i = 0; i < degree; ++i) {
		parameter(0, i) = std::pow(t, i);
	}

	Eigen::Matrix<double, Dynamic, Dynamic> basis;
	basis.resize(degree, degree);
	basis << bezier::GetPowerCoefficients<double>(degree - 1);
	basis *= (degree * 2);

	std::cout << "parameter\n" << parameter << "\n\n";
	std::cout << "basis\n" << basis << "\n\n";

}

void GnuPlotPoints() {
  const double G = 120.0;
  const double ER = 180.0;
  double T;
  std::cout << std::fixed << std::setprecision(6);
  for (double x = 150.0; x <= 200.; x += 1.0) {
    for (double y = -70.0; y <= -50.0; y += .5) {
      T = (G / 2.)*(y + (G / 2.)) / (ER*ER - 2.*ER*x + G*y + (G*G / 4.) + x*x + y*y);
      std::cout << '\n' << T;
    }
    std::cout << '\n';
  }

}

void TestLength() {
  using mpfr::mpreal;
  int precision = 289;
  mpreal::set_default_prec(mpfr::digits2bits(precision));
  std::cout << "precision = " << mpreal::get_default_prec() << '\n';
  using RealScalar = mpreal;
  const size_t dimension = 2; // 2d or 3d points
  const size_t degree = 3;
  const size_t order = degree + 1;
  using Point = Eigen::Matrix<RealScalar, dimension, 1>;

  // Read control points from file
  Point point;
  std::vector<Point> points;
  while (std::cin >> point[0] >> point[1]) {// >> point.z()) {
    points.push_back(point);
  }
  //Eigen::Matrix<double, 24, 1> A;
  //A <<
  //  -0.0640568928626056,
  //  0.0640568928626056,
  //  -0.1911188674736163,
  //  0.1911188674736163,
  //  -0.3150426796961634,
  //  0.3150426796961634,
  //  -0.4337935076260451,
  //  0.4337935076260451,
  //  -0.5454214713888396,
  //  0.5454214713888396,
  //  -0.6480936519369755,
  //  0.6480936519369755,
  //  -0.7401241915785544,
  //  0.7401241915785544,
  //  -0.8200019859739029,
  //  0.8200019859739029,
  //  -0.8864155270044011,
  //  0.8864155270044011,
  //  -0.9382745520027328,
  //  0.9382745520027328,
  //  -0.9747285559713095,
  //  0.9747285559713095,
  //  -0.9951872199970213,
  //  0.9951872199970213;

  //Eigen::Matrix<double, 24, 1> W;
  //W <<
  //  0.1279381953467522,
  //  0.1279381953467522,
  //  0.1258374563468283,
  //  0.1258374563468283,
  //  0.1216704729278034,
  //  0.1216704729278034,
  //  0.1155056680537256,
  //  0.1155056680537256,
  //  0.1074442701159656,
  //  0.1074442701159656,
  //  0.0976186521041139,
  //  0.0976186521041139,
  //  0.0861901615319533,
  //  0.0861901615319533,
  //  0.0733464814110803,
  //  0.0733464814110803,
  //  0.0592985849154368,
  //  0.0592985849154368,
  //  0.0442774388174198,
  //  0.0442774388174198,
  //  0.0285313886289337,
  //  0.0285313886289337,
  //  0.0123412297999872,
  //  0.0123412297999872;

  //Eigen::Matrix<double, 32, 1> A;
  //A <<
  //  -0.0483076656877383,
  //  0.0483076656877383,
  //  -0.1444719615827965,
  //  0.1444719615827965,
  //  -0.2392873622521371,
  //  0.2392873622521371,
  //  -0.3318686022821277,
  //  0.3318686022821277,
  //  -0.4213512761306353,
  //  0.4213512761306353,
  //  -0.5068999089322294,
  //  0.5068999089322294,
  //  -0.5877157572407623,
  //  0.5877157572407623,
  //  -0.6630442669302152,
  //  0.6630442669302152,
  //  -0.7321821187402897,
  //  0.7321821187402897,
  //  -0.7944837959679424,
  //  0.7944837959679424,
  //  -0.8493676137325700,
  //  0.8493676137325700,
  //  -0.8963211557660521,
  //  0.8963211557660521,
  //  -0.9349060759377397,
  //  0.9349060759377397,
  //  -0.9647622555875064,
  //  0.9647622555875064,
  //  -0.9856115115452684,
  //  0.9856115115452684,
  //  -0.9972638618494816,
  //  0.9972638618494816;
  //  std::cout << std::setprecision(16) << std::fixed << A << '\n';
  //Eigen::Matrix<double, 32, 1> W;
  //W <<
  //  0.0965400885147278,
  //  0.0965400885147278,
  //  0.0956387200792749,
  //  0.0956387200792749,
  //  0.0938443990808046,
  //  0.0938443990808046,
  //  0.0911738786957639,
  //  0.0911738786957639,
  //  0.0876520930044038,
  //  0.0876520930044038,
  //  0.0833119242269467,
  //  0.0833119242269467,
  //  0.0781938957870703,
  //  0.0781938957870703,
  //  0.0723457941088485,
  //  0.0723457941088485,
  //  0.0658222227763618,
  //  0.0658222227763618,
  //  0.0586840934785355,
  //  0.0586840934785355,
  //  0.0509980592623762,
  //  0.0509980592623762,
  //  0.0428358980222267,
  //  0.0428358980222267,
  //  0.0342738629130214,
  //  0.0342738629130214,
  //  0.0253920653092621,
  //  0.0253920653092621,
  //  0.0162743947309057,
  //  0.0162743947309057,
  //  0.0070186100094701,
  //  0.0070186100094701;

  //Eigen::Matrix<long double, 32, 1> A;
  Eigen::Matrix<RealScalar, 32, 1> A;
  A <<
    -0.0483076656877383162348125704405021636908472517308488971677937345463685926042778777794060365911173780988289503411375793689757446357461295741679964108035347980667582792392651327368009453047606446744575790523465655622949909588624860214137051585425884056992683442137333250625173849291299678673,
    0.0483076656877383162348125704405021636908472517308488971677937345463685926042778777794060365911173780988289503411375793689757446357461295741679964108035347980667582792392651327368009453047606446744575790523465655622949909588624860214137051585425884056992683442137333250625173849291299678673,
    -0.1444719615827964934851863735988106522038459913156355521379528938242184438164519731102406769974924713989580220758441301598578946580142268413547299935841673092513202403499286272686350814272974392746706128556678811982653393383080797337231702069432462445053984587997153683967433095128570624414,
    0.1444719615827964934851863735988106522038459913156355521379528938242184438164519731102406769974924713989580220758441301598578946580142268413547299935841673092513202403499286272686350814272974392746706128556678811982653393383080797337231702069432462445053984587997153683967433095128570624414,
    -0.2392873622521370745446032091655015206088554219602530155470960995597029133039943915553593695844147813728958071901224632260145752503694970545640339873418480550362677768010887468668377893757173424222709744116861683634989914911762187599464033126988486345234374380695224452457957624756811128321,
    0.2392873622521370745446032091655015206088554219602530155470960995597029133039943915553593695844147813728958071901224632260145752503694970545640339873418480550362677768010887468668377893757173424222709744116861683634989914911762187599464033126988486345234374380695224452457957624756811128321,
    -0.3318686022821276497799168057301879961957751368050598360182296306285376829657438169809731852312743263005943551508559377834274303920771100489026913715847854727626540340157368609696698131829681988642689780208633461925468064919389286805624602715005948661328152252049795463242055567997437182143,
    0.3318686022821276497799168057301879961957751368050598360182296306285376829657438169809731852312743263005943551508559377834274303920771100489026913715847854727626540340157368609696698131829681988642689780208633461925468064919389286805624602715005948661328152252049795463242055567997437182143,
    -0.4213512761306353453641194361724264783358772886324433305416613404557190462549837315607633055675740638739884093394574651160978879545562247406839036854173715776910866941643197988581928900702286425821151586000969947406313405310082646561917980302543820974679501841964453794193724645925031841919,
    0.4213512761306353453641194361724264783358772886324433305416613404557190462549837315607633055675740638739884093394574651160978879545562247406839036854173715776910866941643197988581928900702286425821151586000969947406313405310082646561917980302543820974679501841964453794193724645925031841919,
    -0.5068999089322293900237474743778212301802836995994354639743662809707712640478764442266190213124522047999876916596854537447047905434649918210338296049592120273725464263651562560829050004258268002241145951271730860506703690843719936432852920782304931272053564539127514959875734718036950073563,
    0.5068999089322293900237474743778212301802836995994354639743662809707712640478764442266190213124522047999876916596854537447047905434649918210338296049592120273725464263651562560829050004258268002241145951271730860506703690843719936432852920782304931272053564539127514959875734718036950073563,
    -0.5877157572407623290407454764018268584509401154544205727031788473129228586684474311408145102018661764979429510790747919023774933113319119601088669936958908618326367715806216053155906936017362413244183150445492317940727345571648726363597097311647731726438279098059670236086983675374932643925,
    0.5877157572407623290407454764018268584509401154544205727031788473129228586684474311408145102018661764979429510790747919023774933113319119601088669936958908618326367715806216053155906936017362413244183150445492317940727345571648726363597097311647731726438279098059670236086983675374932643925,
    -0.6630442669302152009751151686632383689770222859605053010170834964924461749232229404368981536611965356686820332804126742949900731319113817214392193185613161549689934301410316417342588149871686184296988807305719690974644891055567340650986465615021143958920599684258616066247948224049997371166,
    0.6630442669302152009751151686632383689770222859605053010170834964924461749232229404368981536611965356686820332804126742949900731319113817214392193185613161549689934301410316417342588149871686184296988807305719690974644891055567340650986465615021143958920599684258616066247948224049997371166,
    -0.732182118740289680387426665091267146630270483506629100821139573270385253587797727611292298988652560055905228466313310601075333829094630570926240639601009902567982815376254840388565733846030450161774620971196087756484387383432502715118096615117242484073636640563609696801484680439912327302,
    0.732182118740289680387426665091267146630270483506629100821139573270385253587797727611292298988652560055905228466313310601075333829094630570926240639601009902567982815376254840388565733846030450161774620971196087756484387383432502715118096615117242484073636640563609696801484680439912327302,
    -0.7944837959679424069630972989704289020954794016388354532507582449720593922816426654241878967890821228397041480126630294067578180914548706957761322921470535094589673860419616615738928385807346185892317514562489971543238450942224396667500582904031225063621511429185567036727089257387570529468,
    0.7944837959679424069630972989704289020954794016388354532507582449720593922816426654241878967890821228397041480126630294067578180914548706957761322921470535094589673860419616615738928385807346185892317514562489971543238450942224396667500582904031225063621511429185567036727089257387570529468,
    -0.849367613732569970133693004967742538954886793049759233100219598613724656141562558741881463752754991143937635778596582088915769685796612254240615386941355933272723068952531445772190363422003834495043219316062885999846179078139659341918527603834809670576387535564876596379488780285979062125,
    0.849367613732569970133693004967742538954886793049759233100219598613724656141562558741881463752754991143937635778596582088915769685796612254240615386941355933272723068952531445772190363422003834495043219316062885999846179078139659341918527603834809670576387535564876596379488780285979062125,
    -0.8963211557660521239653072437192122684789964967957595765636154129650249794910409173494503783167666654202705333374285522819507600044591355080910768854012859468015827508424619812224062460791781333400979810176198916239783226706506012473250929962326307746466256167673927887144428859779028909399,
    0.8963211557660521239653072437192122684789964967957595765636154129650249794910409173494503783167666654202705333374285522819507600044591355080910768854012859468015827508424619812224062460791781333400979810176198916239783226706506012473250929962326307746466256167673927887144428859779028909399,
    -0.9349060759377396891709191348354093255286714322828372184584037398118161947182932855418880831417927728359606280450921427988850058691931014887248988124656348299653052688344696135840215712191162135178273756415771123010111796122671724143565383396162107206772781551029308751511942924942333859805,
    0.9349060759377396891709191348354093255286714322828372184584037398118161947182932855418880831417927728359606280450921427988850058691931014887248988124656348299653052688344696135840215712191162135178273756415771123010111796122671724143565383396162107206772781551029308751511942924942333859805,
    -0.9647622555875064307738119281182749603888952204430187193220113218370995254867038008243801877562227002840740910741483519987441236283464394249183812395373150090695515823078220949436846111682404866338388944248976976566275875721000356873959697266702651250019105084704924793016185368873243713355,
    0.9647622555875064307738119281182749603888952204430187193220113218370995254867038008243801877562227002840740910741483519987441236283464394249183812395373150090695515823078220949436846111682404866338388944248976976566275875721000356873959697266702651250019105084704924793016185368873243713355,
    -0.9856115115452683354001750446309019786323957143358063182107821705820305847193755946663846485510970266115353839862364606643634021712823093784875255943834038377710426488328772047833289470320023596895438028281274741367781028592272459887917924171204666683239464005128153533797603112851826904814,
    0.9856115115452683354001750446309019786323957143358063182107821705820305847193755946663846485510970266115353839862364606643634021712823093784875255943834038377710426488328772047833289470320023596895438028281274741367781028592272459887917924171204666683239464005128153533797603112851826904814,
    -0.9972638618494815635449811286650407271385376637294611593011185457862359083917418520130456693085426416474280482200936551645510686196373231416035137741332968299789863385253514914078766236061488136738023162574655835389902337937054326098485227311719825229066712510246574949376367552421728646398,
    0.9972638618494815635449811286650407271385376637294611593011185457862359083917418520130456693085426416474280482200936551645510686196373231416035137741332968299789863385253514914078766236061488136738023162574655835389902337937054326098485227311719825229066712510246574949376367552421728646398;
  //std::cout << std::setprecision(289) << std::fixed << A << '\n';
  std::cout << std::setprecision(289) << std::fixed << A << '\n';
  Eigen::Matrix<RealScalar, 32, 1> W;
  W <<
    0.0965400885147278005667648300635757947368606312355700687323182099577497758679466512968173871061464644599963197828969869820251559172455698832434930732077927850876632725829187045819145660710266452161095406358159608874152584850413283587913891015545638518881205600825069096855488296437485836866,
    0.0965400885147278005667648300635757947368606312355700687323182099577497758679466512968173871061464644599963197828969869820251559172455698832434930732077927850876632725829187045819145660710266452161095406358159608874152584850413283587913891015545638518881205600825069096855488296437485836866,
    0.0956387200792748594190820022041311005948905081620055509529898509437067444366006256133614167190847508238474888230077112990752876436158047205555474265705582078453283640212465537132165041268773645168746774530146140911679782502276289938840330631903789120176765314495900053061764438990021439069,
    0.0956387200792748594190820022041311005948905081620055509529898509437067444366006256133614167190847508238474888230077112990752876436158047205555474265705582078453283640212465537132165041268773645168746774530146140911679782502276289938840330631903789120176765314495900053061764438990021439069,
    0.0938443990808045656391802376681172600361000757462364500506275696355695118623098075097804207682530277555307864917078828352419853248607668520631751470962234105835015158485760721979732297206950719908744248285672032436598213262204039212897239890934116841559005147755270269705682414708355646603,
    0.0938443990808045656391802376681172600361000757462364500506275696355695118623098075097804207682530277555307864917078828352419853248607668520631751470962234105835015158485760721979732297206950719908744248285672032436598213262204039212897239890934116841559005147755270269705682414708355646603,
    0.0911738786957638847128685771116370625448614132753900053231278739777031520613017513597426417145878622654027367650308019870251963114683369110451524174258161390823876554910693202594383388549640738095422966058367070348943662290656339592299608558384147559830707904449930677260444604329157917977,
    0.0911738786957638847128685771116370625448614132753900053231278739777031520613017513597426417145878622654027367650308019870251963114683369110451524174258161390823876554910693202594383388549640738095422966058367070348943662290656339592299608558384147559830707904449930677260444604329157917977,
    0.0876520930044038111427714627518022875484497217017572223192228034747061150211380239263021665771581379364685191248848158059408000065275041643745927401342920150588893827207354226012701872322225514682178439577327346929209121046816487338309068375228210705166692551938339727096609740531893725675,
    0.0876520930044038111427714627518022875484497217017572223192228034747061150211380239263021665771581379364685191248848158059408000065275041643745927401342920150588893827207354226012701872322225514682178439577327346929209121046816487338309068375228210705166692551938339727096609740531893725675,
    0.0833119242269467552221990746043486115387468839428344598401864047287594069244380966536255650452315042012372905572506028852130723585016898197140339352228963465326746426938359210160503509807644396182380868089959855742801355208471205261406307895519604387550841954817025499019984032594036141439,
    0.0833119242269467552221990746043486115387468839428344598401864047287594069244380966536255650452315042012372905572506028852130723585016898197140339352228963465326746426938359210160503509807644396182380868089959855742801355208471205261406307895519604387550841954817025499019984032594036141439,
    0.078193895787070306471740918828306671039786798482159190307481553869493700115196435401943819761440851294456424770323467367505109006517482028994114252939401250416132320553639542341400437522236191275346323130525969269563653003188829786549728825182082678498917784036375053244425839341945385297,
    0.078193895787070306471740918828306671039786798482159190307481553869493700115196435401943819761440851294456424770323467367505109006517482028994114252939401250416132320553639542341400437522236191275346323130525969269563653003188829786549728825182082678498917784036375053244425839341945385297,
    0.0723457941088485062253993564784877916043369833018248707397632823511765345816800402874475958591657429073027694582930574378890633404841054620298756279975430795706338162404545590689277985270140590721779502609564199074051863640176937117952488466002340085264819537808079947788437998042296495822,
    0.0723457941088485062253993564784877916043369833018248707397632823511765345816800402874475958591657429073027694582930574378890633404841054620298756279975430795706338162404545590689277985270140590721779502609564199074051863640176937117952488466002340085264819537808079947788437998042296495822,
    0.0658222227763618468376500637069387728775364473732465153710916696852412442018627316280044447764609054151761388378861151807154113495715653711918644796313239555117970398473141615070299152284100887258072240524028885129828725430021172354299810423059697133688823072212214503334259555369485963074,
    0.0658222227763618468376500637069387728775364473732465153710916696852412442018627316280044447764609054151761388378861151807154113495715653711918644796313239555117970398473141615070299152284100887258072240524028885129828725430021172354299810423059697133688823072212214503334259555369485963074,
    0.0586840934785355471452836373001708867501204674575467587150032786132877518019090643743123653437052116901895704813134467814193905269714480573030647540887991405215103758723074481312705449946311993670933802369300463315125015975216910705047901943865293781921122370996257470349807212516159332678,
    0.0586840934785355471452836373001708867501204674575467587150032786132877518019090643743123653437052116901895704813134467814193905269714480573030647540887991405215103758723074481312705449946311993670933802369300463315125015975216910705047901943865293781921122370996257470349807212516159332678,
    0.0509980592623761761961632446895216952601847767397628437069071236525030510385137821267442193868358292147899714519363571211100873456269865150186456681043804358654826791768545393024953758025593924464295555854744882720755747096079325496814455853004350452095212995888025282619932613606999567133,
    0.0509980592623761761961632446895216952601847767397628437069071236525030510385137821267442193868358292147899714519363571211100873456269865150186456681043804358654826791768545393024953758025593924464295555854744882720755747096079325496814455853004350452095212995888025282619932613606999567133,
    0.0428358980222266806568786466061255284928108575989407395620219408911043916962572261359138025961596979511472539467367407419206021900868371610612953162236233351132214438513203223655531564777278515080476421262443325932320214191168239648611793958596884827086182431203349730049744697408543115307,
    0.0428358980222266806568786466061255284928108575989407395620219408911043916962572261359138025961596979511472539467367407419206021900868371610612953162236233351132214438513203223655531564777278515080476421262443325932320214191168239648611793958596884827086182431203349730049744697408543115307,
    0.0342738629130214331026877322523727069948402029116274337814057454192310522168984446294442724624445760666244242305266023810860790282088335398182296698622433517061843276344829146573593201201081743714879684153735672789104567624853712011151505225193933019375481618760594889854480408562043658635,
    0.0342738629130214331026877322523727069948402029116274337814057454192310522168984446294442724624445760666244242305266023810860790282088335398182296698622433517061843276344829146573593201201081743714879684153735672789104567624853712011151505225193933019375481618760594889854480408562043658635,
    0.0253920653092620594557525897892240292875540475469487209362512822192154788532376645960457016338988332029324531233401833547954942765653767672102838323550828207273795044402516181251040411735351747299230615776597356956641506445501689924551185923348003766988424170511157069264716719906995309826,
    0.0253920653092620594557525897892240292875540475469487209362512822192154788532376645960457016338988332029324531233401833547954942765653767672102838323550828207273795044402516181251040411735351747299230615776597356956641506445501689924551185923348003766988424170511157069264716719906995309826,
    0.0162743947309056706051705622063866181795429637952095664295931749613369651752917857651844425586692833071042366002861684552859449530958901379260437604156888337987656773068694383447504913457771896770689760342192010638946676879735404121702279005140285599424477022083127753774756520463311689155,
    0.0162743947309056706051705622063866181795429637952095664295931749613369651752917857651844425586692833071042366002861684552859449530958901379260437604156888337987656773068694383447504913457771896770689760342192010638946676879735404121702279005140285599424477022083127753774756520463311689155,
    0.0070186100094700966004070637388531825133772207289396032320082356192151241454178686953297376907573215077936155545790593837513204206518026084505878987243348925784479817181234617862457418214505322067610482902501455504204433524520665822704844582452877416001060465891907497519632353148380799619,
    0.0070186100094700966004070637388531825133772207289396032320082356192151241454178686953297376907573215077936155545790593837513204206518026084505878987243348925784479817181234617862457418214505322067610482902501455504204433524520665822704844582452877416001060465891907497519632353148380799619;

  //std::cout << W;

  auto rows = W.rows();
  RealScalar z = .5;
  RealScalar sum = 0.0;
  RealScalar length = 0.0;
  //std::vector<RealScalar> coeff = bezier::GetCoefficients<RealScalar>(points, 0, 3, 2);
  //std::cout << std::setprecision(15);
  //std::cout << "Coefficients:\n";
  //for (auto iter : coeff) {
  //  std::cout << iter << '\n';
  //}
  for (size_t k = 0; k < points.size() / order; ++k) {
    for (auto i = 0; i < rows; ++i) {
      RealScalar a = A(i, 0);
      RealScalar w = W(i, 0);
      RealScalar t = z * a + z;
      Point derived = bezier::GetFirstDerivative(points, t, k, degree, dimension);
      derived = derived.array().square();
      //sum += w * std::sqrt(derived.sum());
      sum += w * mpfr::sqrt(derived.sum());
    }
    length += z * sum;
    std::cout << std::setprecision(14) << std::fixed << length << '\n';
    sum = 0.0;
  }
  return;
}

//int main(void) {
//  Eigen::Affine3d transform;
//  transform.setIdentity();
//  std::cout << "Transformation Matrix Set to Identity\n" << transform.matrix() << "\n\n";
// 
//  Eigen::Eigen::Vector3d p1(1, 0, 0);
//  std::cout << "Point 1\n" << p1 << "\n\n";
//
//  Eigen::AngleAxisd rotation(.25 * M_PI, Eigen::Eigen::Vector3d::UnitZ());
//  Eigen::Eigen::Vector3d offset(0.75, 0.5, -1.0);
//
//  transform.rotate(rotation).pretranslate(offset);
//  std::cout << "Transformation Matrix: rotate & pretranslate\n" << transform.matrix() << "\n\n";
//  Eigen::Eigen::Vector3d p2 = transform * p1;
//  std::cout << "Point 2: Point 1 transformed using transformation matrix\n" << p2 << "\n\n";
//
//  p2 = transform.inverse() * p2;
//  std::cout << "Point 2: Transformed using inverse transformation matrix\n" << p2 << "\n\n";
//
//  transform.rotate(rotation.inverse()).pretranslate(-offset);
//  std::cout << "Transformation Matrix: Inverse Rotate and Translate\n" << transform.matrix() << "\n\n";
//
//  transform.translate(offset).rotate(rotation);
//  std::cout << "Transformation Matrix: translate\n" << transform.matrix() << "\n\n";
//  p2 = transform * p1;
//  std::cout << "Point 2: Point 1 transformed using transformation matrix\n" << p2 << "\n\n";
//
//  transform.prerotate(rotation);
//  std::cout << "Transformation Matrix: translate\n" << transform.matrix() << "\n\n";
//  p2 = transform * p1;
//  std::cout << "Point 2: Point 1 transformed using transformation matrix\n" << p2 << "\n\n";
//  return 0;
//}

int main(void) {
	using bezier::k2d;	
	using bezier::k3d;
	//TestMatrix();
	//TestFirstDerivative();
	//TestDegreeElevation();
  //GnuPlotPoints();
  TestLength();

	//Eigen::Vector3d controlPoint;
	//std::vector<Eigen::Vector3d> controlPoints;
	//while (std::cin >> controlPoint.x() >> controlPoint.y() >> controlPoint.z()) {
	//	controlPoints.push_back(controlPoint);
	//}
	//std::vector<double> coefficients = bezier::GetCoefficients<double, k3d, kCubic>(controlPoints);
	//for (auto i : coefficients) {
	//	std::cout << i << '\n';
	//}

	//Eigen::Vector2d controlPoint;
	//std::vector<Eigen::Vector2d> controlPoints;
	//while (std::cin >> controlPoint.x() >> controlPoint.y()) {
	//	controlPoints.push_back(controlPoint);
	//}
	//std::vector<double> coefficients = bezier::GetCoefficients<double, k2d, kQuadratic>(controlPoints, 1);
	//for (auto i : coefficients) {
	//	std::cout << i << '\n';
	//}

	//// Routine for eliminating duplicate points to make b-spline control points
	//auto uniqueEnd = std::unique(controlPoints.begin(), controlPoints.end(),
	//	[](const Eigen::Vector3d& lhs, const Eigen::Vector3d& rhs) { return lhs.isApprox(rhs); });
	//controlPoints.erase(uniqueEnd, controlPoints.end());
	
	//Eigen::Vector2d controlPoint;
	//std::vector<Eigen::Vector2d> controlPoints;
	//while (std::cin >> controlPoint.x() >> controlPoint.y()) {
	//	controlPoints.push_back(controlPoint);
	//}
	//Eigen::Vector2d coordinate;
	//for (auto i = 0; i < controlPoints.size() / 3; ++i) {
	//	coordinate = bezier::GetPosition<double, k2d, kQuadratic>(controlPoints, i, .25);
	//	std::cout.precision(5);
	//	std::cout << coordinate.transpose() << '\n';
	//	coordinate = bezier::GetPosition<double, k2d, kQuadratic>(controlPoints, i, .5);
	//	std::cout << coordinate.transpose() << '\n';
	//	coordinate = bezier::GetPosition<double, k2d, kQuadratic>(controlPoints, i, .75);
	//	std::cout << coordinate.transpose() << '\n';
	//}

	//Eigen::Vector3d controlPoint;
	//std::vector<Eigen::Vector3d> controlPoints;
	//while (std::cin >> controlPoint.x() >> controlPoint.y() >> controlPoint.z()) {
	//	controlPoints.push_back(controlPoint);
	//}
	//Eigen::Vector3d coordinate;
	//for (auto i = 0; i < controlPoints.size() / 4; ++i) {
	//	coordinate = bezier::GetPosition<double, k3d, kCubic>(controlPoints, i, .25);
	//	std::cout.precision(5);
	//	std::cout << coordinate.transpose() << '\n';
	//	coordinate = bezier::GetPosition<double, k3d, kCubic>(controlPoints, i, .5);
	//	std::cout << coordinate.transpose() << '\n';
	//	coordinate = bezier::GetPosition<double, k3d, kCubic>(controlPoints, i, .75);
	//	std::cout << coordinate.transpose() << '\n';
	//}

	//using Point = Eigen::Vector3d;
	//Point control_point;
	//std::vector<Point> control_points;
	//Eigen::Matrix3Xd C;
	//size_t col = 0;
	//while (std::cin >> control_point.x() >> control_point.y() >> control_point.z()) {
	//	C.conservativeResize(Eigen::NoChange, col + 1);
	//	control_points.push_back(control_point);
	//	C.block(0, col, 3, 1) = control_point;
	//	++col;
	//}
	//size_t columns = C.cols();
	//std::cout << std::fixed << std::setprecision(6);
	//std::cout << C.transpose() << '\n';
	////for (auto i : control_points) {
	////	std::cout << i.transpose() << '\n';
	////}
	//Eigen::Vector3d coordinate;
	//Eigen::Vector3d tangent;
	//Eigen::Vector3d normal;
	//std::cout << std::fixed << std::setprecision(14);
	//for (auto i = 0; i < control_points.size() / 4; ++i) {
	//	coordinate = bezier::GetPosition<double, bezier::k3d, 3>(control_points, i, .5);
	//	std::cout << coordinate.transpose() << '\n';
	//	tangent = bezier::GetFirstDerivative<double, bezier::k3d, 3>(control_points, i, .5);
	//	tangent.normalize();
	//	tangent += coordinate;
	//	std::cout << tangent.transpose() << '\n';
	//	normal = bezier::GetNormal<double, bezier::k3d, 3>(control_points, i, .5);
	//	normal.normalize();
	//	normal += coordinate;
	//	std::cout << normal.transpose() << '\n';
	//}

	//return 0;
}